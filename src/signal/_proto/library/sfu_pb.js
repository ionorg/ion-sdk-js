/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.sfu.JoinReply', null, global);
goog.exportSymbol('proto.sfu.JoinRequest', null, global);
goog.exportSymbol('proto.sfu.SignalReply', null, global);
goog.exportSymbol('proto.sfu.SignalRequest', null, global);
goog.exportSymbol('proto.sfu.Trickle', null, global);
goog.exportSymbol('proto.sfu.Trickle.Target', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sfu.SignalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sfu.SignalRequest.oneofGroups_);
};
goog.inherits(proto.sfu.SignalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sfu.SignalRequest.displayName = 'proto.sfu.SignalRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sfu.SignalRequest.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.sfu.SignalRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JOIN: 2,
  DESCRIPTION: 3,
  TRICKLE: 4
};

/**
 * @return {proto.sfu.SignalRequest.PayloadCase}
 */
proto.sfu.SignalRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.sfu.SignalRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.sfu.SignalRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sfu.SignalRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sfu.SignalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sfu.SignalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.SignalRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    join: (f = msg.getJoin()) && proto.sfu.JoinRequest.toObject(includeInstance, f),
    description: msg.getDescription_asB64(),
    trickle: (f = msg.getTrickle()) && proto.sfu.Trickle.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sfu.SignalRequest}
 */
proto.sfu.SignalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sfu.SignalRequest;
  return proto.sfu.SignalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sfu.SignalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sfu.SignalRequest}
 */
proto.sfu.SignalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.sfu.JoinRequest;
      reader.readMessage(value,proto.sfu.JoinRequest.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.sfu.Trickle;
      reader.readMessage(value,proto.sfu.Trickle.deserializeBinaryFromReader);
      msg.setTrickle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sfu.SignalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sfu.SignalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sfu.SignalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.SignalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sfu.JoinRequest.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTrickle();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sfu.Trickle.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sfu.SignalRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sfu.SignalRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional JoinRequest join = 2;
 * @return {?proto.sfu.JoinRequest}
 */
proto.sfu.SignalRequest.prototype.getJoin = function() {
  return /** @type{?proto.sfu.JoinRequest} */ (
    jspb.Message.getWrapperField(this, proto.sfu.JoinRequest, 2));
};


/** @param {?proto.sfu.JoinRequest|undefined} value */
proto.sfu.SignalRequest.prototype.setJoin = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.sfu.SignalRequest.oneofGroups_[0], value);
};


proto.sfu.SignalRequest.prototype.clearJoin = function() {
  this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalRequest.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes description = 3;
 * @return {!(string|Uint8Array)}
 */
proto.sfu.SignalRequest.prototype.getDescription = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes description = 3;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.sfu.SignalRequest.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes description = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.sfu.SignalRequest.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/** @param {!(string|Uint8Array)} value */
proto.sfu.SignalRequest.prototype.setDescription = function(value) {
  jspb.Message.setOneofField(this, 3, proto.sfu.SignalRequest.oneofGroups_[0], value);
};


proto.sfu.SignalRequest.prototype.clearDescription = function() {
  jspb.Message.setOneofField(this, 3, proto.sfu.SignalRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalRequest.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Trickle trickle = 4;
 * @return {?proto.sfu.Trickle}
 */
proto.sfu.SignalRequest.prototype.getTrickle = function() {
  return /** @type{?proto.sfu.Trickle} */ (
    jspb.Message.getWrapperField(this, proto.sfu.Trickle, 4));
};


/** @param {?proto.sfu.Trickle|undefined} value */
proto.sfu.SignalRequest.prototype.setTrickle = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.sfu.SignalRequest.oneofGroups_[0], value);
};


proto.sfu.SignalRequest.prototype.clearTrickle = function() {
  this.setTrickle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalRequest.prototype.hasTrickle = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sfu.SignalReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.sfu.SignalReply.oneofGroups_);
};
goog.inherits(proto.sfu.SignalReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sfu.SignalReply.displayName = 'proto.sfu.SignalReply';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.sfu.SignalReply.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.sfu.SignalReply.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JOIN: 2,
  DESCRIPTION: 3,
  TRICKLE: 4,
  ICECONNECTIONSTATE: 5,
  ERROR: 6
};

/**
 * @return {proto.sfu.SignalReply.PayloadCase}
 */
proto.sfu.SignalReply.prototype.getPayloadCase = function() {
  return /** @type {proto.sfu.SignalReply.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.sfu.SignalReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sfu.SignalReply.prototype.toObject = function(opt_includeInstance) {
  return proto.sfu.SignalReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sfu.SignalReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.SignalReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    join: (f = msg.getJoin()) && proto.sfu.JoinReply.toObject(includeInstance, f),
    description: msg.getDescription_asB64(),
    trickle: (f = msg.getTrickle()) && proto.sfu.Trickle.toObject(includeInstance, f),
    iceconnectionstate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    error: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sfu.SignalReply}
 */
proto.sfu.SignalReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sfu.SignalReply;
  return proto.sfu.SignalReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sfu.SignalReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sfu.SignalReply}
 */
proto.sfu.SignalReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.sfu.JoinReply;
      reader.readMessage(value,proto.sfu.JoinReply.deserializeBinaryFromReader);
      msg.setJoin(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.sfu.Trickle;
      reader.readMessage(value,proto.sfu.Trickle.deserializeBinaryFromReader);
      msg.setTrickle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIceconnectionstate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sfu.SignalReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sfu.SignalReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sfu.SignalReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.SignalReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJoin();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sfu.JoinReply.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTrickle();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sfu.Trickle.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.sfu.SignalReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sfu.SignalReply.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional JoinReply join = 2;
 * @return {?proto.sfu.JoinReply}
 */
proto.sfu.SignalReply.prototype.getJoin = function() {
  return /** @type{?proto.sfu.JoinReply} */ (
    jspb.Message.getWrapperField(this, proto.sfu.JoinReply, 2));
};


/** @param {?proto.sfu.JoinReply|undefined} value */
proto.sfu.SignalReply.prototype.setJoin = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.sfu.SignalReply.oneofGroups_[0], value);
};


proto.sfu.SignalReply.prototype.clearJoin = function() {
  this.setJoin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalReply.prototype.hasJoin = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes description = 3;
 * @return {!(string|Uint8Array)}
 */
proto.sfu.SignalReply.prototype.getDescription = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes description = 3;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.sfu.SignalReply.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes description = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.sfu.SignalReply.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/** @param {!(string|Uint8Array)} value */
proto.sfu.SignalReply.prototype.setDescription = function(value) {
  jspb.Message.setOneofField(this, 3, proto.sfu.SignalReply.oneofGroups_[0], value);
};


proto.sfu.SignalReply.prototype.clearDescription = function() {
  jspb.Message.setOneofField(this, 3, proto.sfu.SignalReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalReply.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Trickle trickle = 4;
 * @return {?proto.sfu.Trickle}
 */
proto.sfu.SignalReply.prototype.getTrickle = function() {
  return /** @type{?proto.sfu.Trickle} */ (
    jspb.Message.getWrapperField(this, proto.sfu.Trickle, 4));
};


/** @param {?proto.sfu.Trickle|undefined} value */
proto.sfu.SignalReply.prototype.setTrickle = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.sfu.SignalReply.oneofGroups_[0], value);
};


proto.sfu.SignalReply.prototype.clearTrickle = function() {
  this.setTrickle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalReply.prototype.hasTrickle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string iceConnectionState = 5;
 * @return {string}
 */
proto.sfu.SignalReply.prototype.getIceconnectionstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.sfu.SignalReply.prototype.setIceconnectionstate = function(value) {
  jspb.Message.setOneofField(this, 5, proto.sfu.SignalReply.oneofGroups_[0], value);
};


proto.sfu.SignalReply.prototype.clearIceconnectionstate = function() {
  jspb.Message.setOneofField(this, 5, proto.sfu.SignalReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalReply.prototype.hasIceconnectionstate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string error = 6;
 * @return {string}
 */
proto.sfu.SignalReply.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.sfu.SignalReply.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 6, proto.sfu.SignalReply.oneofGroups_[0], value);
};


proto.sfu.SignalReply.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 6, proto.sfu.SignalReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.sfu.SignalReply.prototype.hasError = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sfu.JoinRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sfu.JoinRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sfu.JoinRequest.displayName = 'proto.sfu.JoinRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sfu.JoinRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sfu.JoinRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sfu.JoinRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.JoinRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: msg.getDescription_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sfu.JoinRequest}
 */
proto.sfu.JoinRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sfu.JoinRequest;
  return proto.sfu.JoinRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sfu.JoinRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sfu.JoinRequest}
 */
proto.sfu.JoinRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sfu.JoinRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sfu.JoinRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sfu.JoinRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.JoinRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string sid = 1;
 * @return {string}
 */
proto.sfu.JoinRequest.prototype.getSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.sfu.JoinRequest.prototype.setSid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.sfu.JoinRequest.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sfu.JoinRequest.prototype.setUid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes description = 3;
 * @return {!(string|Uint8Array)}
 */
proto.sfu.JoinRequest.prototype.getDescription = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes description = 3;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.sfu.JoinRequest.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes description = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.sfu.JoinRequest.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/** @param {!(string|Uint8Array)} value */
proto.sfu.JoinRequest.prototype.setDescription = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sfu.JoinReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sfu.JoinReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sfu.JoinReply.displayName = 'proto.sfu.JoinReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sfu.JoinReply.prototype.toObject = function(opt_includeInstance) {
  return proto.sfu.JoinReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sfu.JoinReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.JoinReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: msg.getDescription_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sfu.JoinReply}
 */
proto.sfu.JoinReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sfu.JoinReply;
  return proto.sfu.JoinReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sfu.JoinReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sfu.JoinReply}
 */
proto.sfu.JoinReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sfu.JoinReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sfu.JoinReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sfu.JoinReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.JoinReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes description = 1;
 * @return {!(string|Uint8Array)}
 */
proto.sfu.JoinReply.prototype.getDescription = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes description = 1;
 * This is a type-conversion wrapper around `getDescription()`
 * @return {string}
 */
proto.sfu.JoinReply.prototype.getDescription_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDescription()));
};


/**
 * optional bytes description = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDescription()`
 * @return {!Uint8Array}
 */
proto.sfu.JoinReply.prototype.getDescription_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDescription()));
};


/** @param {!(string|Uint8Array)} value */
proto.sfu.JoinReply.prototype.setDescription = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sfu.Trickle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sfu.Trickle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.sfu.Trickle.displayName = 'proto.sfu.Trickle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sfu.Trickle.prototype.toObject = function(opt_includeInstance) {
  return proto.sfu.Trickle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sfu.Trickle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.Trickle.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, 0),
    init: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sfu.Trickle}
 */
proto.sfu.Trickle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sfu.Trickle;
  return proto.sfu.Trickle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sfu.Trickle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sfu.Trickle}
 */
proto.sfu.Trickle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.sfu.Trickle.Target} */ (reader.readEnum());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sfu.Trickle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sfu.Trickle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sfu.Trickle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sfu.Trickle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInit();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sfu.Trickle.Target = {
  PUBLISHER: 0,
  SUBSCRIBER: 1
};

/**
 * optional Target target = 1;
 * @return {!proto.sfu.Trickle.Target}
 */
proto.sfu.Trickle.prototype.getTarget = function() {
  return /** @type {!proto.sfu.Trickle.Target} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.sfu.Trickle.Target} value */
proto.sfu.Trickle.prototype.setTarget = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string init = 2;
 * @return {string}
 */
proto.sfu.Trickle.prototype.getInit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.sfu.Trickle.prototype.setInit = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.sfu);
